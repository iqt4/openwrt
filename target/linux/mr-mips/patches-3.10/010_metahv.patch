--- a/drivers/char/Kconfig
+++ b/drivers/char/Kconfig
@@ -156,6 +156,13 @@ config PPDEV
 	  If unsure, say N.
 
 source "drivers/tty/hvc/Kconfig"
+config HVC_META
+	bool "MetaROUTER Hypervisor Console support"
+	depends on METAROUTER || MIPS_MIKROTIK
+	select HVC_DRIVER
+	select HVC_IRQ
+	default y
+
 
 config VIRTIO_CONSOLE
 	tristate "Virtio console"
@@ -606,4 +613,3 @@ config TILE_SROM
 	  how to partition a single ROM for multiple purposes.
 
 endmenu
-
--- a/drivers/tty/hvc/Makefile
+++ b/drivers/tty/hvc/Makefile
@@ -8,6 +8,7 @@ obj-$(CONFIG_HVC_BEAT)		+= hvc_beat.o
 obj-$(CONFIG_HVC_DRIVER)	+= hvc_console.o
 obj-$(CONFIG_HVC_IRQ)		+= hvc_irq.o
 obj-$(CONFIG_HVC_XEN)		+= hvc_xen.o
+obj-$(CONFIG_HVC_META)          += hvc_meta.o
 obj-$(CONFIG_HVC_IUCV)		+= hvc_iucv.o
 obj-$(CONFIG_HVC_UDBG)		+= hvc_udbg.o
 obj-$(CONFIG_HVC_BFIN_JTAG)	+= hvc_bfin_jtag.o
--- a/drivers/tty/hvc/hvc_console.c
+++ b/drivers/tty/hvc/hvc_console.c
@@ -588,7 +588,7 @@ static int hvc_chars_in_buffer(struct tt
  * there has been no input for some time.
  */
 #define MIN_TIMEOUT		(10)
-#define MAX_TIMEOUT		(2000)
+#define MAX_TIMEOUT		(200)
 static u32 timeout = MIN_TIMEOUT;
 
 #define HVC_POLL_READ	0x00000001
--- /dev/null
+++ b/drivers/tty/hvc/hvc_meta.c
@@ -0,0 +1,135 @@
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/string.h>
+#include <linux/errno.h>
+#include <linux/mm.h>
+#include <linux/bootmem.h>
+#include <linux/slab.h>
+#include <asm/vm.h>
+#include <asm/irq.h>
+#include "hvc_console.h"
+
+extern int vm_create_queue(unsigned id, unsigned irq,
+			   unsigned tx, unsigned rx);
+extern int vm_release_queue(unsigned id);
+
+#define BUF_SIZE	4096
+
+static volatile struct vdma_descr tx_descr;
+static volatile struct vdma_descr rx_descr;
+
+static unsigned rx_offset;
+static DEFINE_SPINLOCK(lock);
+
+static int put_chars(u32 vtermno, const char *buf, int count)
+{
+	unsigned long flags;
+	int i;
+
+	spin_lock_irqsave(&lock, flags);
+
+#ifdef __powerpc__
+	for (i = 0; i < 2000000; ++i) {
+#else
+	for (i = 0; i < 2; ++i) {
+#endif
+		unsigned size = xchg(&tx_descr.size, 0);
+
+		if (!(size & DONE)) {
+			count = min(count, BUF_SIZE);
+			memcpy((char *) tx_descr.addr, buf, count);
+			tx_descr.size = count | DONE;
+
+			spin_unlock_irqrestore(&lock, flags);
+			return count;
+		}
+
+		if (size == (BUF_SIZE | DONE)) {
+			if (i == 0) {
+				tx_descr.size = size;
+				hc_yield();
+				continue;
+			} else {
+				unsigned drop = BUF_SIZE / 4;
+				size = BUF_SIZE - drop;
+				memcpy((char *) tx_descr.addr,
+				       (char *) tx_descr.addr + drop,
+				       size);
+			}
+		}
+
+		size &= ~DONE;
+		count = min(BUF_SIZE - (int) size, count);
+		memcpy((char *) tx_descr.addr + size, buf, count);
+		tx_descr.size = (size + count) | DONE;
+
+		spin_unlock_irqrestore(&lock, flags);
+		return count;
+	}
+
+	spin_unlock_irqrestore(&lock, flags);
+	return 0;
+}
+
+static int get_chars(u32 vtermno, char *buf, int count)
+{
+	unsigned long flags;
+	unsigned size;
+
+	spin_lock_irqsave(&lock, flags);
+
+	if (!(rx_descr.size & DONE)) {
+		spin_unlock_irqrestore(&lock, flags);
+		return -EAGAIN;
+	}
+	
+	size = (rx_descr.size & ~DONE) - rx_offset;
+	count = min(count, (int) size);
+
+	memcpy(buf, (char *) rx_descr.addr + rx_offset, count);
+
+	if (count == size) {
+		rx_descr.size = BUF_SIZE;
+		rx_offset = 0;
+	} else {
+		rx_offset += count;
+	}
+
+	spin_unlock_irqrestore(&lock, flags);
+	return count;
+}
+
+static struct hv_ops cons = {
+	.put_chars = put_chars,
+	.get_chars = get_chars,
+	.notifier_add = notifier_add_irq,
+	.notifier_del = notifier_del_irq,
+};
+
+static int __init cons_init(void)
+{
+	if (vm_running() != 0)
+		return 0;
+
+	rx_descr.addr = (unsigned) kmalloc(BUF_SIZE, GFP_KERNEL);
+	rx_descr.size = BUF_SIZE;
+	rx_descr.next = (unsigned) &rx_descr;
+	
+	tx_descr.addr = (unsigned) kmalloc(BUF_SIZE, GFP_KERNEL);
+	tx_descr.size = 0;
+	tx_descr.next = (unsigned) &tx_descr;
+
+	vm_create_queue(1, 1,
+			(unsigned) &tx_descr, (unsigned) &rx_descr);
+
+	return hvc_instantiate(0, 0, &cons);
+}
+console_initcall(cons_init);
+
+int vm_init(void)
+{
+	if (vm_running() == 0) 
+		hvc_alloc(0, get_virq_nr(1), &cons, 256);
+	return 0;
+}
+module_init(vm_init);
